# 프로그래밍 언어와 컴파일러의 작동 원리

## 1.1 여러분이 프로그래밍 언어를 발명한다면?

컴퓨터는 기본적으로 **이진수(0과 1)** 만 이해할 수 있는 기계입니다. 
즉, CPU는 **전원이 켜짐(On)과 꺼짐(Off)** 만 인식할 수 있는 원시적인 장치입니다.

### 저수준 언어(Low-Level Language)
초기에는 천공카드를 사용하여 명령을 전달했으며, 이후 **어셈블리어(Assembly Language)** 가 등장했습니다.

### 고급 프로그래밍 언어(High-Level Programming Language)
고급 언어는 **명령의 규칙과 패턴**을 기반으로 프로그래밍을 가능하게 합니다. 

- 개별 명령을 **Statement(문)** 으로 작성
- 중첩된 Statement를 **Syntax(구문)** 으로 구성
- Syntax를 **구문 트리(Syntax Tree)** 로 변환하여 컴퓨터가 이해할 수 있도록 준비
- 컴파일러(Compiler)는 **리프 노드부터 재귀적으로** 기계 명령어로 번역

### 해석형 언어(Interpreted Language)
각 CPU마다 사용하는 기계어가 다르기 때문에, CPU 형식에 관계없이 실행할 수 있도록 **표준 명령어 집합**을 사용합니다.

이를 실행하기 위해 **CPU의 명령어 실행 과정을 모방하는 프로그램**이 필요합니다. 이를 **가상머신(Virtual Machine) 혹은 인터프리터(Interpreter)** 라고 부릅니다.

---

## 1.2 컴파일러는 어떻게 작동하는 것일까?

컴파일러(Compiler)는 **고수준 언어를 저수준 언어로 변환하는 프로그램**입니다.

소스코드를 입력받아 실행 파일을 반환하는 **텍스트 처리 프로그램**이라고 볼 수 있습니다.

### 1️⃣ 어휘 분석(Lexical Analysis)

소스코드에서 **토큰(Token)** 을 추출하는 과정입니다.

예제 코드:
```c
int a = 1;
int b = 2;

while (a < b) {
    b = b - 1;
}
```

이 코드에서 추출된 토큰 예시:
```
T_Keyword      int
T_Identifier   a
T_Assign       =
...
```

---

### 2️⃣ 구문 분석(Parsing)
구문 문법(Syntax)에 따라 토큰을 해석하며, **문법 오류(Syntax Error)를 검사**합니다.

예를 들어, `while` 키워드를 발견하면 **다음 토큰이 반드시 `(` 여야 한다** 는 규칙을 적용해 검사를 진행합니다.

구문 분석을 통해 **구문 트리(Syntax Tree)** 를 생성합니다.

---

### 3️⃣ 의미 분석(Semantic Analysis)
구문 트리가 올바른지 확인하며, **컴파일 오류를 검사**합니다.

예제:
- 정수와 문자열을 더할 수 없음 (`int + string` 오류)
- 비교 연산(`a < b`)에서 좌우 피연산자의 타입이 다르면 오류 발생

---

### 4️⃣ 중간 코드 생성(Intermediate Representation, IR Code)

구문 트리를 탐색하여 **중간 코드(IR Code)** 를 생성한 후, 이를 단계적으로 변환합니다.
1. **어셈블리어(Assembly Language)** 로 변환
2. **기계 명령어(Machine Code)** 로 변환

이 과정은 매우 복잡하며 최적화도 함께 수행됩니다.

---

### 5️⃣ 대상 파일(Object File)과 링크(Linking)

소스코드가 **소스 파일(Source File)** 에 저장되듯, 기계 명령어는 **대상 파일(Object File)** 에 저장됩니다.

여러 개의 대상 파일을 묶어 실행 가능한 프로그램으로 만드는 과정을 **링크(Linking)** 라고 합니다.

---

## 🔗 결론

프로그래밍 언어는 **고급 언어 -> 저급 언어** 로 변환되며, 이를 위해 **컴파일러** 가 중요한 역할을 합니다.

또한, CPU와 독립적으로 동작하는 해석형 언어는 **가상머신(VM)과 인터프리터** 를 사용하여 실행됩니다.

이러한 개념을 이해하면 프로그래밍 언어와 컴파일러의 작동 원리를 보다 깊이 있게 이해할 수 있습니다.
